13. Matrix Addition using operator overloading

#include <iostream>
using namespace std;
class Matrix {
private:
    int a[3][3]; 
public:
    Matrix() {} 
    Matrix(int r[3][3]);
    void get(); 
    void print(); 
    Matrix operator+(Matrix s);
};

Matrix::Matrix(int r[3][3]) {
    for (int i = 0; i < 3; i++) 
    {
        for (int j = 0; j < 3; j++) 
            a[i][j] = r[i][j]; 
    }
}
void Matrix::get() {
    cout << "Enter a 3x3 Matrix:" << endl;
    for (int i = 0; i < 3; i++) 
    {
        for (int j = 0; j < 3; j++) 
            cin >> a[i][j];
        
    }
}
Matrix Matrix::operator+(Matrix s) {
    Matrix t;
    for (int i = 0; i < 3; i++) 
   {
        for (int j = 0; j < 3; j++) 
            t.a[i][j] = a[i][j] + s.a[i][j];         
   }
   return t; 
}
void Matrix::print() {
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            if (j > 0) 
            cout << "\t";
            cout << a[i][j]; 
        }
        cout << endl; 
    }
}
int main() {
    Matrix m1, m2, m3; 
    m1.get(); 
    m2.get(); 
    m3 = m1 + m2; 
    cout << "Addition of two matrices:" << endl;
    m3.print(); 
    return 0;
}

